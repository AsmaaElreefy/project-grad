/*!

    Copyright 2011 Michael Phan-Ba

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

 */


/** Module dependencies. */

var AgentConnector = require('../connector').AgentConnector
  , util = require('./util');


/** JSON response connector.

    If no underlying connector is given, the `options` are used to create a
    new `AgentConnector` connector.

    @param {Object} [options] Options to pass to underlying connector.
      @param {Connector} [options.connector] Underlying connector.
 */

var JsonConnector = exports.JsonConnector = function(options) {
  options = options || {};
  this.connector = options.connector || new AgentConnector(options);
};


/** Service a request.

    For all server responses except for `HEAD`, the body is parsed as JSON
    and passed to the callback.

    For `HEAD` requests, the `request.headers` are passed to the callback.

    @param {Object} [options] Options to pass to underlying connector.
    @param {Function} [callback] Callback function.
      @param {Error|null} callback.error Error or `null` on success.
      @param {Object} callback.data Headers for `HEAD` requests or parsed
        JSON data from the response body.
      @param {ClientResponse} callback.response ClientResponse object.
    @return {ClientRequest}
 */

JsonConnector.prototype.request = function(options, callback) {
  if (typeof options !== 'object') {
    callback = options;
    options = null;
  }

  this.connector.request(options, function(err, response) {
    if (err) return callback(err);

    var body = [];

    response.setEncoding('utf8');
    response.on('data', function(chunk) { chunk && body.push(chunk) });
    response.on('end', function() {
      if (response.method === 'HEAD') return callback(null, response.headers, response);

      try {
        var json = JSON.parse(body.join(''));
      } catch (err) {
        return callback(err, null, response);
      }

      callback(null, json, response);
    });
  });
};


/** Close underlying connections.

    @param {Function} [callback] Callback function.
      @param {Error|null} callback.error Error or `null` on success.
 */

JsonConnector.prototype.close = function(callback) {
  this.connector.close(callback);
};
